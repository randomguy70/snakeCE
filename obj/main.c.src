	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_main
_main:
	push	ix
	ld	ix, 0
	add	ix, sp
	ld	hl, -1828
	add	hl, sp
	ld	sp, hl
	lea	de, ix + -15
	ld	bc, -1828
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), de
	ld	bc, -1822
	lea	hl, ix + 0
	add	hl, bc
	ld	bc, -1825
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	push	de
	push	hl
	call	_initialiseGame
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	hl, 1
	push	hl
	call	_gfx_SetDraw
	pop	hl
	call	_gfx_ZeroScreen
	ld	bc, -1825
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_drawSnake
	pop	hl
	ld	bc, -1828
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_drawApple
	pop	hl
	ld	hl, 1
	push	hl
	call	_gfx_SetDraw
	pop	hl
	call	_gfx_ZeroScreen
	ld	bc, -1828
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_drawApple
	pop	hl
	ld	bc, -1825
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_drawSnake
	pop	hl
	call	_gfx_SwapDraw
	ld	bc, -1825
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_updateSnake
	pop	hl
	call	_kb_Scan
	ld	iy, -720866
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	jq	nz, BB0_11
BB0_2:
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	and	a, 1
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB0_4
	ld	hl, 3
	ld	(ix + -22), hl
BB0_4:
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	bit	3, a
	jq	z, BB0_6
	ld	hl, 2
	ld	(ix + -22), hl
BB0_6:
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	bit	2, a
	jq	z, BB0_8
	or	a, a
	sbc	hl, hl
	ld	(ix + -22), hl
BB0_8:
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	bit	1, a
	jq	z, BB0_10
	ld	hl, 1
	ld	(ix + -22), hl
BB0_10:
	ld	hl, 1
	push	hl
	call	_gfx_SetDraw
	pop	hl
	call	_gfx_ZeroScreen
	ld	bc, -1828
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_drawApple
	pop	hl
	ld	bc, -1825
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_drawSnake
	pop	hl
	call	_gfx_SwapDraw
	ld	bc, -1825
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_updateSnake
	pop	hl
	call	_kb_Scan
	ld	iy, -720866
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	jq	z, BB0_2
BB0_11:
	call	_gfx_End
	or	a, a
	sbc	hl, hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	private	_initialiseGame
_initialiseGame:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix + -7
	ld	sp, hl
	call	_gfx_Begin
	ld	iy, -851900
	ld	hl, (iy)
	ld	a, (iy + 3)
	ld	e, a
	push	de
	push	hl
	call	_srandom
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	call	_random
	ld	bc, 316
	call	__iremu
	inc	hl
	ld	iy, (ix + 9)
	ld	(iy), hl
	xor	a, a
	ld	(iy + 3), a
	call	_random
	ld	bc, 236
	call	__iremu
	inc	hl
	ld	iy, (ix + 9)
	ld	(iy + 4), hl
	xor	a, a
	ld	(iy + 7), a
	ld	de, 1803
	ld	bc, (ix + 6)
	push	bc
	pop	iy
	add	iy, de
	ld	hl, 10
	ld	(iy), hl
	lea	hl, iy + 3
	ld	(hl), a
	ld	de, 1800
	push	bc
	pop	hl
	add	hl, de
	ld	de, 3
	ld	(hl), de
	ld	iy, 0
	ld	d, a
BB1_2:
	lea	hl, iy + 0
	ld	(ix + -3), hl
	ld	bc, 9
	call	__imulu
	push	hl
	pop	bc
	ld	iy, (ix + 6)
	add	iy, bc
	ld	hl, 160
	ld	(iy), hl
	xor	a, a
	ld	(iy + 3), a
	ld	bc, (ix + -3)
	ld	a, d
	ld	l, 2
	call	__lshl
	push	bc
	pop	hl
	ld	e, a
	ld	bc, 50
	xor	a, a
	call	__ladd
	ld	(iy + 4), hl
	ld	(iy + 7), e
	ld	(iy + 8), -1
	ld	iy, (ix + -3)
	lea	hl, iy + 0
	ld	e, d
	ld	bc, 1
	call	__ladd
	ld	(ix + -6), hl
	ld	(ix + -7), e
	lea	hl, iy + 0
	ld	e, d
	ld	bc, 9
	xor	a, a
	call	__lcmpu
	ld	a, 1
	jq	c, BB1_4
	ld	a, 0
BB1_4:
	bit	0, a
	ld	iy, (ix + -6)
	ld	d, (ix + -7)
	jq	nz, BB1_2
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	private	_drawSnake
_drawSnake:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix + -10
	ld	sp, hl
	ld	hl, (ix + 6)
	ld	de, 0
	ld	(ix + -3), de
	xor	a, a
	ld	de, 1803
	push	hl
	pop	iy
	add	iy, de
	ld	hl, (iy)
	ld	(ix + -7), iy
	lea	iy, iy + 3
	ld	(ix + -10), iy
	ld	e, (iy)
	call	__lcmpzero
	jq	z, BB2_2
	ld	(ix + -4), a
BB2_3:
	ld	hl, (ix + -3)
	ld	bc, 9
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 6)
	add	hl, de
	push	hl
	call	_fillPoint
	xor	a, a
	pop	hl
	ld	hl, (ix + -3)
	ld	e, (ix + -4)
	ld	bc, 1
	call	__ladd
	push	hl
	pop	iy
	ld	hl, (ix + -7)
	ld	bc, (hl)
	ld	hl, (ix + -10)
	ld	a, (hl)
	ld	(ix + -3), iy
	lea	hl, iy + 0
	ld	(ix + -4), e
	call	__lcmpu
	ld	a, 1
	jq	c, BB2_5
	ld	a, 0
BB2_5:
	bit	0, a
	jq	nz, BB2_3
BB2_2:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	private	_drawApple
_drawApple:
	push	ix
	ld	ix, 0
	add	ix, sp
	ld	hl, (ix + 6)
	push	hl
	call	_fillPoint
	pop	hl
	ld	hl, (ix + 6)
	push	hl
	call	_outlinePoint
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	private	_updateSnake
_updateSnake:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix + -16
	ld	sp, hl
	ld	iy, (ix + 6)
	xor	a, a
	or	a, a
	sbc	hl, hl
	ld	(ix + -3), hl
	ld	de, 1800
	add	iy, de
	ld	de, (iy)
	ld	bc, 4
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	nc, BB4_29
	ld	bc, 1
	ld	hl, LJTI4_0
	add	hl, de
	add	hl, de
	add	hl, de
	ld	hl, (hl)
	jp	(hl)
BB4_2:
	ld	de, 1803
	ld	iy, (ix + 6)
	add	iy, de
	ld	hl, (iy)
	ld	(ix + -6), iy
	lea	iy, iy + 3
	ld	(ix + -9), iy
	ld	e, (iy)
	ld	iy, (ix + 6)
	xor	a, a
	call	__lcmpu
	ld	a, 0
	jq	z, BB4_7
	ld	d, a
BB4_4:
	ld	hl, (ix + -3)
	ld	e, d
	ld	bc, 1
	call	__ladd
	ld	(ix + -12), hl
	ld	(ix + -13), e
	ld	bc, 9
	call	__imulu
	push	hl
	pop	de
	lea	hl, iy + 0
	add	hl, de
	ld	(ix + -16), hl
	ld	hl, (ix + -3)
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, 9
	push	hl
	push	iy
	ld	hl, (ix + -16)
	push	hl
	call	_memcpy
	ld	d, (ix + -13)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix + -6)
	ld	hl, (hl)
	ld	iy, (ix + -9)
	ld	e, (iy)
	ld	iy, (ix + -12)
	ld	bc, -1
	ld	a, -1
	call	__ladd
	push	hl
	pop	bc
	ld	a, e
	lea	hl, iy + 0
	ld	e, d
	call	__lcmpu
	ld	a, 1
	jq	c, BB4_6
	ld	a, 0
BB4_6:
	bit	0, a
	ld	(ix + -3), iy
	ld	iy, (ix + 6)
	ld	a, 0
	jq	nz, BB4_4
BB4_7:
	ld	hl, (iy)
	ld	e, (iy + 3)
	ld	bc, 2
	ld	d, a
	call	__ladd
	push	hl
	pop	bc
	ld	a, e
	ld	hl, 319
	ld	e, d
	call	__lcmpu
	jq	nc, BB4_28
	ld	hl, 1
	ld	(iy), hl
	ld	(iy + 3), d
	jq	BB4_29
BB4_9:
	ld	de, 1803
	ld	iy, (ix + 6)
	add	iy, de
	ld	hl, (iy)
	ld	(ix + -6), iy
	lea	iy, iy + 3
	ld	(ix + -9), iy
	ld	e, (iy)
	ld	iy, (ix + 6)
	call	__lcmpu
	jq	z, BB4_14
	ld	d, a
BB4_11:
	ld	hl, (ix + -3)
	ld	e, d
	ld	bc, 1
	call	__ladd
	ld	(ix + -12), hl
	ld	(ix + -13), e
	ld	bc, 9
	call	__imulu
	push	hl
	pop	de
	lea	hl, iy + 0
	add	hl, de
	ld	(ix + -16), hl
	ld	hl, (ix + -3)
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, 9
	push	hl
	push	iy
	ld	hl, (ix + -16)
	push	hl
	call	_memcpy
	ld	d, (ix + -13)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix + -6)
	ld	hl, (hl)
	ld	iy, (ix + -9)
	ld	e, (iy)
	ld	iy, (ix + -12)
	ld	bc, -1
	ld	a, -1
	call	__ladd
	push	hl
	pop	bc
	ld	a, e
	lea	hl, iy + 0
	ld	e, d
	call	__lcmpu
	ld	a, 1
	jq	c, BB4_13
	ld	a, 0
BB4_13:
	bit	0, a
	ld	(ix + -3), iy
	ld	iy, (ix + 6)
	ld	a, 0
	jq	nz, BB4_11
BB4_14:
	lea	de, iy + 4
	ld	hl, (iy + 4)
	push	de
	pop	iy
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, -2
	ld	a, -1
	jq	BB4_21
BB4_15:
	ld	de, 1803
	ld	iy, (ix + 6)
	add	iy, de
	ld	hl, (iy)
	ld	(ix + -6), iy
	lea	iy, iy + 3
	ld	(ix + -9), iy
	ld	e, (iy)
	ld	iy, (ix + 6)
	xor	a, a
	call	__lcmpu
	ld	a, 0
	jq	z, BB4_20
	ld	d, a
BB4_17:
	ld	hl, (ix + -3)
	ld	e, d
	ld	bc, 1
	call	__ladd
	ld	(ix + -12), hl
	ld	(ix + -13), e
	ld	bc, 9
	call	__imulu
	push	hl
	pop	de
	lea	hl, iy + 0
	add	hl, de
	ld	(ix + -16), hl
	ld	hl, (ix + -3)
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, 9
	push	hl
	push	iy
	ld	hl, (ix + -16)
	push	hl
	call	_memcpy
	ld	d, (ix + -13)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix + -6)
	ld	hl, (hl)
	ld	iy, (ix + -9)
	ld	e, (iy)
	ld	iy, (ix + -12)
	ld	bc, -1
	ld	a, -1
	call	__ladd
	push	hl
	pop	bc
	ld	a, e
	lea	hl, iy + 0
	ld	e, d
	call	__lcmpu
	ld	a, 1
	jq	c, BB4_19
	ld	a, 0
BB4_19:
	bit	0, a
	ld	(ix + -3), iy
	ld	iy, (ix + 6)
	ld	a, 0
	jq	nz, BB4_17
BB4_20:
	lea	de, iy + 4
	ld	hl, (iy + 4)
	push	de
	pop	iy
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 2
BB4_21:
	call	__ladd
	ld	iy, (ix + 6)
	ld	(iy + 4), hl
	ld	(iy + 7), e
	jq	BB4_29
BB4_22:
	ld	de, 1803
	ld	iy, (ix + 6)
	add	iy, de
	ld	hl, (iy)
	ld	(ix + -6), iy
	lea	iy, iy + 3
	ld	(ix + -9), iy
	ld	e, (iy)
	ld	iy, (ix + 6)
	xor	a, a
	call	__lcmpu
	ld	a, 0
	jq	z, BB4_27
	ld	d, a
BB4_24:
	ld	hl, (ix + -3)
	ld	e, d
	ld	bc, 1
	call	__ladd
	ld	(ix + -12), hl
	ld	(ix + -13), e
	ld	bc, 9
	call	__imulu
	push	hl
	pop	de
	lea	hl, iy + 0
	add	hl, de
	ld	(ix + -16), hl
	ld	hl, (ix + -3)
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, 9
	push	hl
	push	iy
	ld	hl, (ix + -16)
	push	hl
	call	_memcpy
	ld	d, (ix + -13)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix + -6)
	ld	hl, (hl)
	ld	iy, (ix + -9)
	ld	e, (iy)
	ld	iy, (ix + -12)
	ld	bc, -1
	ld	a, -1
	call	__ladd
	push	hl
	pop	bc
	ld	a, e
	lea	hl, iy + 0
	ld	e, d
	call	__lcmpu
	ld	a, 1
	jq	c, BB4_26
	ld	a, 0
BB4_26:
	bit	0, a
	ld	(ix + -3), iy
	ld	iy, (ix + 6)
	ld	a, 0
	jq	nz, BB4_24
BB4_27:
	ld	hl, (iy)
	ld	iy, (ix + 6)
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, -2
	ld	a, -1
	call	__ladd
	ld	iy, (ix + 6)
	ld	(iy), hl
	ld	(iy + 3), e
	jq	BB4_29
BB4_28:
	ld	(iy), bc
	ld	(iy + 3), a
BB4_29:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
lJTI4_0:
	private	LJTI4_0
LJTI4_0:
	dl	BB4_2
	dl	BB4_22
	dl	BB4_9
	dl	BB4_15

	section	.text,"ax",@progbits
	public	_checkForDeath
_checkForDeath:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix + -18
	ld	sp, hl
	ld	iy, (ix + 6)
	ld	hl, 1
	ld	e, 0
	ld	bc, 1803
	add	iy, bc
	ld	bc, (iy)
	ld	(ix + -8), iy
	lea	iy, iy + 3
	ld	(ix + -11), iy
	ld	a, (iy)
	call	__lcmpu
	ld	d, 1
	ld	iyl, 0
	ld	(ix + -4), d
	jq	nc, BB5_1
	call	__lcmpu
	jq	c, BB5_3
BB5_4:
	bit	0, d
	jq	nz, BB5_14
BB5_5:
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	hl, (iy)
	ld	(ix + -14), hl
	ld	a, (iy + 3)
	ld	(ix + -15), a
	ld	hl, 1
	xor	a, a
	ld	(ix + -5), a
BB5_6:
	ld	(ix + -3), hl
	ld	hl, (ix + -3)
	ld	bc, 9
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	ld	d, 0
	ld	bc, (iy)
	ld	a, (iy + 3)
	ld	iy, (ix + 6)
	ld	hl, (ix + -14)
	ld	e, (ix + -15)
	call	__lcmpu
	ld	hl, (ix + -3)
	jq	nz, BB5_10
	ld	bc, (iy + 4)
	ld	(ix + -18), bc
	ld	e, (iy + 7)
	ld	bc, 9
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	bc, (iy + 4)
	ld	a, (iy + 7)
	ld	hl, (ix + -18)
	call	__lcmpu
	ld	a, 1
	jq	z, BB5_9
	ld	a, 0
BB5_9:
	bit	0, a
	ld	hl, (ix + -3)
	jq	nz, BB5_13
BB5_10:
	ld	e, (ix + -5)
	ld	bc, 1
	ld	a, d
	call	__ladd
	push	hl
	pop	iy
	ld	hl, (ix + -8)
	ld	bc, (hl)
	ld	hl, (ix + -11)
	ld	a, (hl)
	ld	(ix + -3), iy
	lea	hl, iy + 0
	ld	(ix + -5), e
	call	__lcmpu
	ld	a, 1
	jq	c, BB5_12
	ld	a, 0
BB5_12:
	ld	(ix + -4), a
	bit	0, a
	ld	hl, (ix + -3)
	jq	nz, BB5_6
	jq	BB5_13
BB5_1:
	push	af
	ld	a, iyl
	ld	(ix + -4), a
	pop	af
	call	__lcmpu
	jq	nc, BB5_4
BB5_3:
	ld	d, iyl
	bit	0, d
	jq	z, BB5_5
BB5_14:
BB5_13:
	ld	a, (ix + -4)
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_checkForAppleCollision
_checkForAppleCollision:
	push	ix
	ld	ix, 0
	add	ix, sp
	ld	iy, (ix + 6)
	ld	d, 0
	ld	hl, (iy)
	ld	e, (iy + 3)
	ld	iy, (ix + 9)
	ld	bc, (iy)
	ld	iy, (ix + 9)
	ld	a, (iy + 3)
	call	__lcmpu
	jq	nz, BB6_6
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	hl, (iy + 4)
	ld	e, (iy + 7)
	ld	bc, (ix + 9)
	push	bc
	pop	iy
	ld	bc, (iy + 4)
	ld	a, (iy + 7)
	call	__lcmpu
	jq	z, BB6_2
	ld	a, 0
	bit	0, a
	jq	nz, BB6_5
BB6_6:
	jq	BB6_7
BB6_2:
	ld	a, 1
	bit	0, a
	jq	z, BB6_6
BB6_5:
	ld	d, 1
BB6_7:
	ld	a, d
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	private	_fillPoint
_fillPoint:
	push	ix
	ld	ix, 0
	add	ix, sp
	ld	iy, (ix + 6)
	ld	a, (iy + 8)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	iy, (ix + 6)
	ld	hl, (iy)
	ld	a, (iy + 4)
	ld	de, 4
	push	de
	push	de
	ld	e, a
	push	de
	push	hl
	call	_gfx_FillRectangle_NoClip
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	private	_outlinePoint
_outlinePoint:
	push	ix
	ld	ix, 0
	add	ix, sp
	ld	hl, -1
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	iy, (ix + 6)
	ld	hl, (iy)
	ld	a, (iy + 4)
	ld	de, 4
	push	de
	push	de
	ld	e, a
	push	de
	push	hl
	call	_gfx_Rectangle_NoClip
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	ident	"clang version 12.0.0 (https://github.com/jacobly0/llvm-project 170be88120e3aa88c20eea5615ba76b8f1d6c647)"
	extern	_random
	extern	__Unwind_SjLj_Register
	extern	_gfx_FillRectangle_NoClip
	extern	_gfx_Begin
	extern	__lcmpzero
	extern	_kb_Scan
	extern	_gfx_Rectangle_NoClip
	extern	_memcpy
	extern	_gfx_SwapDraw
	extern	__ladd
	extern	_gfx_SetDraw
	extern	__Unwind_SjLj_Unregister
	extern	_srandom
	extern	__lshl
	extern	__iremu
	extern	_gfx_ZeroScreen
	extern	__imulu
	extern	_gfx_SetColor
	extern	_gfx_End
	extern	__lcmpu
